#ifndef MOEA_D_ALGORITHM_H
#define MOEA_D_ALGORITHM_H
#include "MOP_Algorithm.h"

class MOEA_D_Algorithm : public MOP_Algorithm
{
public:
    MOEA_D_Algorithm();
    virtual ~MOEA_D_Algorithm();

    virtual void AlgorithmProcess();

    void Initial();

private:
    //δ:the probability that parent solutions are selected from the neighborhood
    double Delte;
    //the maximal number of solutions replaced by each child solution.
    double nr;
    //T closest weight vectors to each weight vector
    int T;

    vector<vector<double>> population;
    vector<vector<double>> lambda; //权值矩阵
    vector<vector<int>> WVneighbors; //权值向量的邻居下标
    vector<vector<double>> populationfValue;
    vector<double> FV;  //FV[i] = F(x[i])
    vector<double> z;  //z[i] the best value found so far for objective fi

    void WVneighborInit();
    void populationInit();
    void updateThePopulation();
    void weightVectorGenerator();
    double subproblemValue(int index,const vector<double> &x);
    vector<double> make_new_solution_DE(int r1, int r2, int r3);
    double eularDistance(const vector<double> &x,
                         const vector<double> &y, int size);
};

const double NBI_2[] = {0,
                        0.00334448,0.00668896,0.0100334,0.0133779,0.0167224,0.0200669,0.0234114,
                        0.0267559,0.0301003,0.0334448,0.0367893,0.0401338,0.0434783,0.0468227,
                        0.0501672,0.0535117,0.0568562,0.0602007,0.0635452,0.0668896,0.0702341,
                        0.0735786,0.0769231,0.0802676,0.083612,0.0869565,0.090301,0.0936455,
                        0.09699,0.100334,0.103679,0.107023,0.110368,0.113712,0.117057,
                        0.120401,0.123746,0.12709,0.130435,0.133779,0.137124,0.140468,
                        0.143813,0.147157,0.150502,0.153846,0.157191,0.160535,0.16388,
                        0.167224,0.170569,0.173913,0.177258,0.180602,0.183946,0.187291,
                        0.190635,0.19398,0.197324,0.200669,0.204013,0.207358,0.210702,
                        0.214047,0.217391,0.220736,0.22408,0.227425,0.230769,0.234114,
                        0.237458,0.240803,0.244147,0.247492,0.250836,0.254181,0.257525,
                        0.26087,0.264214,0.267559,0.270903,0.274247,0.277592,0.280936,
                        0.284281,0.287625,0.29097,0.294314,0.297659,0.301003,0.304348,
                        0.307692,0.311037,0.314381,0.317726,0.32107,0.324415,0.327759,
                        0.331104,0.334448,0.337793,0.341137,0.344482,0.347826,0.351171,
                        0.354515,0.35786,0.361204,0.364548,0.367893,0.371237,0.374582,
                        0.377926,0.381271,0.384615,0.38796,0.391304,0.394649,0.397993,
                        0.401338,0.404682,0.408027,0.411371,0.414716,0.41806,0.421405,
                        0.424749,0.428094,0.431438,0.434783,0.438127,0.441472,0.444816,
                        0.448161,0.451505,0.454849,0.458194,0.461538,0.464883,0.468227,
                        0.471572,0.474916,0.478261,0.481605,0.48495,0.488294,0.491639,
                        0.494983,0.498328,0.501672,0.505017,0.508361,0.511706,0.51505,
                        0.518395,0.521739,0.525084,0.528428,0.531773,0.535117,0.538462,
                        0.541806,0.545151,0.548495,0.551839,0.555184,0.558528,0.561873,
                        0.565217,0.568562,0.571906,0.575251,0.578595,0.58194,0.585284,
                        0.588629,0.591973,0.595318,0.598662,0.602007,0.605351,0.608696,
                        0.61204,0.615385,0.618729,0.622074,0.625418,0.628763,0.632107,
                        0.635452,0.638796,0.64214,0.645485,0.648829,0.652174,0.655518,
                        0.658863,0.662207,0.665552,0.668896,0.672241,0.675585,0.67893,
                        0.682274,0.685619,0.688963,0.692308,0.695652,0.698997,0.702341,
                        0.705686,0.70903,0.712375,0.715719,0.719064,0.722408,0.725753,
                        0.729097,0.732441,0.735786,0.73913,0.742475,0.745819,0.749164,
                        0.752508,0.755853,0.759197,0.762542,0.765886,0.769231,0.772575,
                        0.77592,0.779264,0.782609,0.785953,0.789298,0.792642,0.795987,
                        0.799331,0.802676,0.80602,0.809365,0.812709,0.816054,0.819398,
                        0.822742,0.826087,0.829431,0.832776,0.83612,0.839465,0.842809,
                        0.846154,0.849498,0.852843,0.856187,0.859532,0.862876,0.866221,
                        0.869565,0.87291,0.876254,0.879599,0.882943,0.886288,0.889632,
                        0.892977,0.896321,0.899666,0.90301,0.906355,0.909699,0.913043,
                        0.916388,0.919732,0.923077,0.926421,0.929766,0.93311,0.936455,
                        0.939799,0.943144,0.946488,0.949833,0.953177,0.956522,0.959866,
                        0.963211,0.966555,0.9699,0.973244,0.976589,0.979933,0.983278,
                        0.986622,0.989967,0.993311,0.996656,1
                       };
const double NBI_3[] = {0,
                        0.030303,0.0606061,0.0909091,0.121212,0.151515,0.181818,0.212121,
                        0.242424,0.272727,0.30303,0.333333,0.363636,0.393939,0.424242,
                        0.454545,0.484848,0.515152,0.545455,0.575758,0.606061,0.636364,
                        0.666667,0.69697,0.727273,0.757576,0.787879,0.818182,0.848485,
                        0.878788,0.909091,0.939394,0.969697,1
                       };
#endif // MOEA_D_ALGORITHM_H
